syntax = "proto3";
package Gateway_gRPC_api;


// version 3.6.0
//~/protobuf/bin/protoc -I Gateway_Towards_Fenix_gRPC_api --go_out=plugins=grpc:Gateway_Towards_Fenix_gRPC_api Gateway_Towards_Fenix_gRPC_api/gateway_towards_fenix_grpc.proto
//~/protobuf/bin/protoc -I Gateway_Towards_Plugin_gRPC_api --go_out=plugins=grpc:Gateway_Towards_Plugin_gRPC_api Gateway_Towards_Plugin_gRPC_api/gateway_towards_plugin_grpc.proto

//190516
//protoc_3.7.0.rc2 -I Gateway_gRPC_api --go_out=plugins=grpc:Gateway_gRPC_api Gateway_gRPC_api/gateway_towards_fenix_grpc.proto

// Import common Gateway messages and servicesTestDataFormatTypeEnum
import "gateway_common_grpc.proto";

// ***********************************************************************************
// Runtime messages
// ***********************************************************************************



// *********************************************************
//  rpc SendTestInstructionResultTowardsFenix (TestInstructionExecutionResultMessage) returns (AckNackResponse)
//
// START
// **********

// The result of the TestInstructionExecution sent towards Fenix Inception
message TestInstructionExecutionResultMessage {
    string OriginalSenderId = 1 ; // Then Id of the gateway/plugin that created the message
    string OriginalSenderName = 2 ; // Then name of the gateway/plugin that created the message
    string SenderId = 3; // Then Id of the gateway/plugin that was the last forwarder
    string SenderName = 4; // Then name of the gateway/plugin that was the last forwarder
    string TestInstructionGuid = 5; //  TestInstructionGuid is a unique id created when TestInstruction is created in TestCase
    string ResultId = 6; // A unique id created by plugin
    string TimeOut = 7; // The Plugin sends back information about when the TestInstruction, Test Case, can be seen as Ended if no final result has sent been back for TestInstruction
    string TestInstructionResultCreatedDateTime = 8; // The DateTime when the message was created
    string TestInstructionResultSentDateTime = 9; // The DateTime when the message was sent
    AvailableTestExecutionResultsEnum TestExecutionResult = 10; // THe current execution status
    string OriginalSystemDomainId = 11; // The Domain/system's Id where the Sender operates
    string OriginalSystemDomainName = 12; // The Domain/system's Name where the Sender operates
    string MessageId = 13; // A unique id for the message created by plugin
    string PeerId = 14; // A unique id for all peer TestInstructions that can be processed in parallell with current TestInstruction
}

// Status for an ongoing TestExecution of a TestInstruction
enum AvailableTestExecutionResultsEnum {
    Execution_Succeded = 0; // The execution succeded compared to expected result
    Execution_Failed = 1; // The execution failed compared to expected result
    Execution_Aborted = 2; // The Plugin Aborted the execution of the TestInstruction
    Execution_Running = 3; // Status for when TestInstruction is executing and TimeOut-time is sent back
}

// **********
// END
// *********************************************************

// *********************************************************
//  rpc SendTestExecutionLogTowardsFenix (TestExecutionLogMessage) returns (AckNackResponse)
//
// START
// **********

// A log post that sent back to Fenix Inception from plugin during test execution
message TestExecutionLogMessage {
    string OriginalSenderId = 1 ; // Then Id of the gateway/plugin that created the message
    string OriginalSenderName = 2 ; // Then name of the gateway/plugin that created the message
    string SenderId = 3; // Then Id of the gateway/plugin that was the last forwarder
    string SenderName = 4; // Then name of the gateway/plugin that was the last forwarder
    string TestInstructionGuid = 5; //  TestInstructionGuid is a unique id created when TestInstruction is created in TestCase
    string LogMessageId = 6; // A unique id created by plugin
    string TestInstructionResultCreatedDateTime = 7; // The DateTime when the message was created
    string TestInstructionResultSentDateTime = 8; // The DateTime when the message was sent
    string LogMessage = 9; // The log message
    LogMessageTypeEnum LogMessageType = 10; // The type of the log message, text or json
    string OriginalSystemDomainId = 11; // The Domain/system's Id where the Sender operates
    string OriginalSystemDomainName = 12; // The Domain/system's Name where the Sender operates
}

// Is the log message a json-object or a plain text message
enum LogMessageTypeEnum {
    JSON = 0;
    TEXT = 1;
}

// **********
// END
// *********************************************************


// *********************************************************
//  rpc SendTestInstructionTimeOutTowardsFenix(TestInstructionTimeOutMessage) returns (AckNackResponse)
//
// START
// **********

// A message telling Fenix when a TestInstruction should time out and by then the complete TestCase
message TestInstructionTimeOutMessage {
    string OriginalSenderId = 1 ; // Then Id of the gateway/plugin that created the message
    string OriginalSenderName = 2 ; // Then name of the gateway/plugin that created the message
    string SenderId = 3; // Then Id of the gateway/plugin that was the last forwarder
    string SenderName = 4; // Then name of the gateway/plugin that was the last forwarder
    string OriginalMessageId = 5; // A unique id from the TestInstruction request sent from Fenix
    string MessageId = 6; // A unique id generated when sent from Plugin
    string TimeOut = 7; // The time for timeout informat 'YYYY-MM-DD hh:mm:ss' w
    string OrginalCreateDateTime = 8; // The timestamp when the orignal message was created
    string OriginalSystemDomainId = 9; // The Domain/system's Id where the Sender operates
    string OriginalSystemDomainName = 10; // The Domain/system's Name where the Sender operates

}

// **********
// END
// *********************************************************

// ***********************************************************************************
// Test Data messages
// *****


// *********************************************************
//  rpc SupportedTestDataDomains (SupportedTestDataDomainsWithHeadersMessage) returns (AckNackResponse)
//
// START
// **********

// All supported Testdata domains supported by a specific Plugin
message SupportedTestDataDomainsWithHeadersMessage {
    string OriginalSenderId = 1 ; // Then Id of the gateway/plugin that created the message
    string OriginalSenderName = 2 ; // Then name of the gateway/plugin that created the message
    string SenderId = 3; // Then Id of the gateway/plugin that was the last forwarder
    string SenderName = 4; // Then name of the gateway/plugin that was the last forwarder
    string OriginalMessageId = 5; // A unique id from the request sent from Fenix
    string MessageId = 6; // A unique id generated when sent from Plugin

    // Message thats defines a specific domain of testdata, a specific area
    message TestDataDomainWithHeaders {
        string TestDataDomainId = 1; // The unique id of the testdata domain
        string TestDataDomainName = 2; // The name of the testdata domain
        string TestDataDomainDescription = 3; // A description of the testdata domain
        string TestDataDomainMouseOver = 4; // A mouse over description of the testdata domain

        // Message holding one header, key, that is used for filtering testdata
        message TestDataFilterHeader {
            string TestDataFilterHeaderId = 1; //  A unique id for the header
            string TestDataFilterHeaderName = 2;// A name for the keader
            string TestDataFilterHeaderDescription = 3; // A description of the header
            string TestDataFilterHeaderMouseOver = 4; // A mouse over description of the header
            string TestDataFilterHash = 5; // ??????????????????????????????????????????????????????????????????????????
            bool AllowMultipleChoices = 6; // Should multiple chocies be allowed for this header
            bool AllowNoChoice = 7; // Shpuld no choice be allowed for this header

            // Message holding a specific value for a header
            message TestDataFilterHeaderValue {
                string TestDataFilterHeaderValueId = 1; // A unique id for the filter value
                string TestDataFilterHeaderValueName = 2; // The name for the filter value
            }
            repeated TestDataFilterHeaderValue TestDataFilterHeaderValues = 8; // All values for a specific header, key, that can be usen when filtering
        }
        repeated TestDataFilterHeader TestDataFilterHeaders = 5; // All headers, keys, that is used for filter testdata
    }
    repeated TestDataDomainWithHeaders TestDataDomains = 7; // All supported Testdata domains from plugin
    string OrginalCreateDateTime = 8; // The timestamp when the orignal message was created
    string OriginalSystemDomainId = 9; // The Domain/system's Id where the Sender operates
    string OriginalSystemDomainName = 10; // The Domain/system's Name where the Sender operates
}

// **********
// END
// *********************************************************


// *********************************************************
//  rpc TestDataFromFilterValues (TestDataListFromFilterValuesMessage) returns (AckNackResponse)
//
// START
// **********

// Message that contains the filtered testdata that was asked for
message TestDataFromFilterValuesMessage {
    string PluginId = 1; // The unique id of the plugin
    string PluginName = 2; // The name of the plugin
    string OriginalMessageId = 3; // A unique id from the request sent from Fenix
    string MessageId = 4; // A unique id generated when sent from Plugin
    string TestDataDomainId = 5; //
    int64 StartLineOfResultSet = 6; //  This is the first Test Data Row that should be sent back to Fenix
    int64 MaxNumberOffLinesInResult = 7; // This is the number of Test Data Rows that should be sent back to Fenix
    TestDataFormatTypeEnum TestDataType = 8; // THe format the testdata is been delivered in

    // Message contining the testdata in a specific form
    message TestDataObject {
        ListObject TestDataAsList = 1; // Object containing Testdata in Listform
        JsonObject TestDataAsJson = 2; // Object containing Testdata in json-form
        XmlObject TestDataAsXml = 3; // Object containing Testdata in xml-form
        OtherFileObject TestDataAsOtherFile = 4; // Object containing Testdata in a non standard form
    }
    TestDataObject TestData = 9; // The object containing the testdata
    string OrginalCreateDateTime = 10; // The timestamp when the orignal message was created
    string OriginalSystemDomainId = 11; // The Domain/system's Id where the Sender operates
    string OriginalSystemDomainName = 12; // The Domain/system's Name where the Sender operates
}


// Testdata in listform
message ListObject {
    // Message for Header, Key
    message TestDataFilterHeader {
        string TestDataFilterHeaderId = 1; // Unique id for the header
        string TestDataFilterHeaderName = 2; // The Header name/value
    }
    repeated TestDataFilterHeader TestDataFIlterHeaders = 1; // All Headers
    // Message for row with testdata
    message TestDataRow {
        // Message for a value in the row
        message TestDataValue {
            string TestDataRowValueId = 1; // A unique id for the value
            string TestDataFilterRowValue = 2; // The value
        }
        repeated TestDataValue TestDataValues = 1; // All values on a row
    }
    repeated TestDataRow TestDataRows = 2; // All  testdata rows
}

// Testdata in jsaon-form
message JsonObject {

}

// Testdata in XML-form
message XmlObject {

}

// Testdata in some "other" form
message OtherFileObject {

}

// **********
// END
// *********************************************************


// ***********************************************************************************
// Registration messages
// ***********************************************************************************

// *********************************************************
//  rpc RegisterClientAddress (RegisterClientAddressRequest) returns (RegisterClientAddressResponse)
//
// START
// **********

// Request from client that register itself at gateway
message RegisterClientAddressRequest {
    CurrentVersionEnum gRPCVersion = 1; // The current version of the protofile
    string callingSystemId = 2; // The calling systems Id, Plugin or a Sub-Gateway,
    string callingSystemName = 3; // THe name of the Calling System
    string callingSystemIpAddress = 4; // The ip address for the calling system
}

// Prefered Port, where the client will called upon
message RegisterClientAddressResponse {
    int32 ClientPort = 1; //The port where the client will be called upon
    bool acknack = 2; // True=Ack, False=Nack
    string comments = 3; //Comments if needed
}

// **********
//
// END
// *********************************************************

// *********************************************************
//  rpc RegisterAvailbleTestInstructions(AvailbleTestInstructionAtPluginMessage)returns(AckNackResponse)
// START
// **********

// Data and Information regarding a specific TestInstruction offered by a specific plugin
message AvailbleTestInstructionAtPluginMessage {
    string OriginalSenderId = 1; // Then Id of the plugin that created the message
    string OriginalSenderName = 2; // Then name of the plugin that created the message
    string SenderId = 3; // Then Id of the gateway/plugin that was the last forwarder
    string SenderName = 4; // Then name of the gateway/plugin that was the last forwarder
    string MessageId = 5; // A unique id generated when sent from Plugin
    string OrginalCreateDateTime = 6; // The timestamp when the orignal message was created
    string OriginalSystemDomainId = 7; // The Domain/system's Id where the Sender operates
    string OriginalSystemDomainName = 8; // The Domain/system's Name where the Sender operates

    repeated TestInstruction TestInstructions = 9; // All supported TestInstructions from plugin
    // Message thats defines a specific Test Instruction
    message TestInstruction {
        string PluginGuid = 1; // Used as unique id for the plugin
        string PluginName = 2; // Used as unique name for the plugin
        string SystemDomainId = 3; // The Domain/system's Id where the Sender operates
        string SystemDomainName = 4; // The Domain/system's Name where the Sender operates
        string TestInstructionTypeGuid = 5; // The unique guid for the Type of TestInstruction. Set by Client system
        string TestInstructionTypeName = 6; // The name for the Type of TestInstruction. Set by Client system
        string TestInstructionGuid = 7; // The unique guid for the TestInstruction. Set when used in Editor
        string TestInstructionName = 8; // The name of the TestInstruction
        string TestInstructionDescription = 9; // The description of the TestInstruction
        string TestInstructionMouseOver = 10; // The mouse over test for the TestInstruction
        string TestInstructionVisible = 11; // Should the TestInstruction be visible in GUI or not
        string TestInstructionEnable = 12; // Should the TestInstruction be enabled or not
        string TestInstructionColor = 13; // The color used for presenting the TestInstructionBlock, e.g. #FAF437
        repeated string DropIDs = 14; // A Drop-IDs deciding if receiver accepts obejct when drag n drop. Can have many Drop-IDs
        repeated string LandingZoneGuid = 16; //  List with IDs of all available LandingZones for TestInstruction
        string ChoosenLandingZone = 17; // The choosen LandingZone for this TestInstructionBlock
        repeated TestInstructionAttribute TestInstructionAttributes = 15; // List with IDs of all attributes for the TestInstruction

        // A specific Attribute for a Test Instruction
        message TestInstructionAttribute {
            string TestInstructionAttributeGuid = 1; // The unique guid for the TestInstructionAttribute, set when used in Editor
            string TestInstructionAttributeTypeGuid = 2; // The unique guid for the TestInstructionAttribute-type, set by client system
            string TestInstructionAttributeName = 3; // The name of the TestInstructionAttribute
            string TestInstructionAttributeDescription = 4; // The description of the TestInstructionAttribute
            string TestInstructionAttributeMouseOver = 5; // The mouse over test for the TestInstructionAttribute
            bool TestInstructionAttributeVisible = 6; // Should the TestInstructionAttribute be visible in attributes list in GUI or not
            bool TestInstructionAttributeEnable = 7; // Should the TestInstructionAttribute be enabled or not
            bool TestInstructionAttributeMandatory = 8; // Should the TestInstructionAttribute be mandatory or not
            bool TestInstructionAttributeVisibleInBlockArea = 9; // Should the TestInstructionAttribute be visible in TestInstructionBlockAreain GUI or not
            TestInstructionAttributeTypeEnum TestInstructionAttributeType = 10; // The choosen Enum value for what type the instruction attribute should be
            // The TestInstructionAttribute can one of the folowing type: "TextBox", "ComboBox", "FileSelector", "FunctionSelector"
            enum TestInstructionAttributeTypeEnum {
                TEXTBOX = 0; // Defines that TestInstructionAttriebute of type "TextBox"
                COMBOBOX = 1; // Defines that TestInstructionAttriebute of type ComboBox
                FILESELECTOR = 2; // Defines that TestInstructionAttriebute of type FileSelector
                FUNCTIONSLECTOR = 3; // Defines that TestInstructionAttriebute of type FunctionSelector
            }

            TestInstructionAttributeInputTextBoxProperty inputTextBoxProperty = 11; // If the attribute is a textbox then all properties can be found in structure
            // Properties for TextBox attribute
            message TestInstructionAttributeInputTextBoxProperty {
                string TestInstructionAttributeInputTextBoxGuid = 1; // The unique guid for the TestInstructionAttributeInputTextBoxProperties, set when used in Editor
                string TestInstructionAttributeInputTextBoxName = 2; // The name of the TestInstructionAttributeInputTextBoxProperties
                bool TextBoxEditable = 3; // Should the the TextBox be editable or not
                string TextBoxInputMask = 4; // Inputmask for the TextBox
                string TextBoxAttributeTypeGuid = 5; // The unique guid for the Type of the TextBox. Used for datamanupulation
                string TextBoxAttributeTypeName = 6; // The Name for the Type of the TextBox.
                string TextBoxAttributeValue = 7; // The value for the the TextBox, used for preset values
            }

            TestInstructionAttributeInputComboBoxProperty InputComboBoxProperty = 12; // If the attribute is a combobox then all properties can be found in structure
            // Properties for ComboBox attribute
            message TestInstructionAttributeInputComboBoxProperty {
                string TestInstructionAttributeComboBoxGuid = 1; // The unique guid for the TestInstructionAttributeComboBoxProperties, set when used in Editor
                string TestInstructionAttributeComboBoxName = 2; // The name of the TestInstructionAttributeComboBoxProperties
                bool ComboBoxEditable = 3; // Should the the ComboBox be editable or not
                string ComboBoxInputMask = 4; // Inputmask for the ComboBox
                string ComboBoxAttributeTypeGuid = 5; // The unique guid for the Type of the ComboBox Used for datamanupulation
                string ComboBoxAttributeTypeName = 6; // The Name for the Type of the ComboBox
                string ComboBoxAttributeValueGuid = 7; // The guid of the value for the the ComboBox
                string ComboBoxAttributeValue = 8; // The value for the the ComboBox
            }

            TestInstructionAttributeInputFileSelectorProperty InputFileSelectorProperty = 13; // If the attribute is a combobox then all properties can be found in structure
            // Properties for FileSelector attribute
            message TestInstructionAttributeInputFileSelectorProperty {
                string TestInstructionAttributeFileSelectorGuid = 1; // The unique guid for the TestInstructionAttributeFileSelectorProperties, set when used in Editor
                string TestInstructionAttributeFileSelectorName = 2; // The name of the TestInstructionAttributeFileSelectorProperties
            }

            //TODO Skapa ett attribute för funktioner oxo

        }
    }
}

// **********
// END
// *********************************************************

// *********************************************************
//  rpc RegistrateAailableTestContainers(AvailbleTestContainersAtPluginMessage) returns (AckNackResponse){
// START
// **********
message AvailbleTestContainersAtPluginMessage {
    string OriginalSenderId = 1; // Then Id of the plugin that created the message
    string OriginalSenderName = 2; // Then name of the plugin that created the message
    string SenderId = 3; // Then Id of the gateway/plugin that was the last forwarder
    string SenderName = 4; // Then name of the gateway/plugin that was the last forwarder
    string MessageId = 5; // A unique id generated when sent from Plugin
    string OrginalCreateDateTime = 6; // The timestamp when the orignal message was created
    string OriginalSystemDomainId = 7; // The Domain/system's Id where the Sender operates
    string OriginalSystemDomainName = 8; // The Domain/system's Name where the Sender operates
    repeated TestContainerChildObjectMessage TestContainerChildObjectMessages = 9;
}


// A Container that holds block of TestContainerMessages and TestInstructions
message TestContainerMessage {
    string PluginGuid = 1; // Used as unique id for the plugin
    string PluginName = 2; // Used as unique name for the plugin
    string SystemDomainId = 3; // The Domain/system's Id where the Sender operates
    string SystemDomainName = 4; // The Domain/system's Name where the Sender operates
    string TestContainerGuid = 5; // A unique id for the TestContainer
    string TestContainerName = 6; // A name for the TestContainer
    TestContainerTypeEnum TestContainerType = 7; // Should container have Serial or Parallell processed children or is it a TestContainer
    enum TestContainerTypeEnum {
        IsSerialProcessedContainer = 0; // Container has Serial Processed children
        IsParallellProcessedContainer = 1; // Container has Parallell Processed children
    }
    repeated TestContainerChildObjectMessage TestBlockChildObjectMessages = 8; // An object containing child-TesContainers and TestInstructions
}

message TestContainerChildObjectMessage {
    TestInstructionChildTypeEnum ChildType = 1;
    enum TestInstructionChildTypeEnum {
        ChildIsTestInstructionContainerMessage = 0;
        ChildIsTestInstructionMessage = 1;
    }
    TestContainerMessage TestInstructionMessageChild = 2;
    AvailbleTestInstructionAtPluginMessage AvailbleTestInstructionAtPluginMessageChild = 3;
}

// **********
// END
// *********************************************************

// *********************************************************
//  rpc RegistrateAAvailableTestDataDomains(SupportedTestDataDomainsMessage) returns (AckNackResponse){
// START
// **********

// All supported Testdata domains supported by a specific Plugin
message SupportedTestDataDomainsMessage {
    string OriginalSenderId = 1 ; // Then Id of the plugin that created the message
    string OriginalSenderName = 2 ; // Then name of the plugin that created the message
    string SenderId = 3; // Then Id of the gateway/plugin that was the last forwarder
    string SenderName = 4; // Then name of the gateway/plugin that was the last forwarder
    string MessageId = 5; // A unique id generated when sent from Plugin

    // Message thats defines a specific domain of testdata, a specific area
    message TestDataDomain {
        string TestDataDomainId = 1; // The unique id of the testdata domain
        string TestDataDomainName = 2; // The name of the testdata domain
        string TestDataDomainDescription = 3; // A description of the testdata domain
        string TestDataDomainMouseOver = 4; // A mouse over description of the testdata domain
    }
    repeated TestDataDomain TestDataDomains = 6; // All supported Testdata domains from plugin
    string OrginalCreateDateTime = 7; // The timestamp when the orignal message was created
    string OriginalSystemDomainId = 8; // The Domain/system's Id where the Sender operates
    string OriginalSystemDomainName = 9; // The Domain/system's Name where the Sender operates
}

// **********
// END
// *********************************************************
// ***********************************************************************************
// Administrative messages
// ***********************************************************************************

// A message used when Gateway or Plugin wants to send information to Fenix
message InformationMessage {
    string OriginalSenderId = 1 ; // Then Id of the gateway/plugin that created the message
    string OriginalSenderName = 2 ; // Then name of the gateway/plugin that created the message
    string OriginalSystemDomainId = 3; // The Domain/system's Id where the Sender operates
    string OriginalSystemDomainName = 4; // The Domain/system's Name where the Sender operates
    string SenderId = 5; // Then Id of the gateway/plugin that was the last forwarder
    string SenderName = 6; // Then name of the gateway/plugin that was the last forwarder
    string MessageId = 7; // A unique id generated when sent from Gateway or Plugin
    enum InformationType {
        DEBUG = 0; // MessageType only used for developing
        INFO = 1; // The message is pure information
        WARNING = 2; //  The message is of category WARNING
        ERROR = 3; // The Plugin wants to inform Fenix of that something is wrong
        FATAL = 4; // THe gateway will log problem and then exit
    }
    InformationType MessageType = 8;// The type of information message
    string message = 9; // The message from Gateway or Plugin to Fenix
    string OrginalCreateDateTime = 10; // The timestamp when the orignal message was created
}

/*
// Used for defining the current version of the proto-file
enum CurrentVersionEnum {
    VERSION_0_1_0 = 0; // Current version

}

// Parameter used for Empty inputs
message EmptyParameter {
}

// Ack/Nack- Response message with comment
message AckNackResponse {
    bool acknack = 1; // True=Ack, False=Nack
    string comments = 2; //Comments if needed
}
*/


// The Gateservice definition.
service GatewayTowardsFenix {

    // ***********************************************************************************
    // Runtime methods
    // ***********************************************************************************


    //TestInstructionResults flows from Plugins towards Fenix Inception
    rpc SendTestInstructionResultTowardsFenix (TestInstructionExecutionResultMessage) returns (AckNackResponse) {
    }

    // Log-posts har sent from Plugins towards Fenix Inception
    rpc SendTestExecutionLogTowardsFenix (TestExecutionLogMessage) returns (AckNackResponse) {
    }

    // TestInstructions Timeouts flows from Plugins towards Fenix.
    // Used for telling Fenix when a TestInstruction should be have a timeout and execution for Testcase should be stopped
    rpc SendTestInstructionTimeOutTowardsFenix (TestInstructionTimeOutMessage) returns (AckNackResponse) {
    }

    // ***********************************************************************************
    // Test Data methods
    // ***********************************************************************************

    rpc SupportedTestDataDomains (SupportedTestDataDomainsWithHeadersMessage) returns (AckNackResponse) {
    }

    // This one will probably be deleted
//    rpc TestDataFromFilterValues (TestDataFromFilterValuesMessage) returns (AckNackResponse) {
//
//    }
    // ***********************************************************************************
    // Registration methods
    // ***********************************************************************************

    // Register an avalible TestInstruction
    rpc RegisterAvailbleTestInstructions(AvailbleTestInstructionAtPluginMessage) returns (AckNackResponse){
    }

    // Register the different Testdata Domains that is supported
    rpc RegistrateAvailableTestDataDomains(SupportedTestDataDomainsMessage) returns (AckNackResponse) {
    }

    // Register Test Containers that are supported. A Test Container consists of many TestInstructions grouped together into one unit
    rpc RegistrateAailableTestContainers(AvailbleTestContainersAtPluginMessage) returns (AckNackResponse){
    }

    // A Plugin register itself at a distributed gateway or a distributed gateway register itself at Fenix Inception gateway
    rpc RegisterClientAddress (RegisterClientAddressRequest) returns (RegisterClientAddressResponse) {
    }

    // ***********************************************************************************
    // Administrative methods
    // ***********************************************************************************

    // A Plugin can send a INFO- OR WARNING-message to Fenix by this mwethod
    rpc SendMessageToFenix (InformationMessage) returns (AckNackResponse){
    }


}


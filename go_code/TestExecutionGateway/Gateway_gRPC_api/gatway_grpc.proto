syntax = "proto3";
package Gateway_gRPC_api;


// version 3.6.0
//~/protobuf/bin/protoc -I Gateway_gRPC_api --go_out=plugins=grpc:Gateway_gRPC_api Gateway_gRPC_api/gateway_grpc_api.proto







// Response to client when registering itself at gateway
//message







// ***********************************************************************************
// Runtime messages
// ***********************************************************************************

// ***********************************
// Towards Plugin
// ***********************************

// *********************************************************
// rpc SendTestInstructionTowardsPlugin (TestInstruction_RT) returns (AckNackResponse) {
// START
// **********

//  A RunTime version of the TestInstruction sent from Fenix towards a Plugin
message TestInstruction_RT {
    string TestInstructionTypeGuid = 1; // TestInstructionTypeGuid tells Plugin what to do, set by Plugin
    string TestInstructionGuid = 2; //  TestInstructionGuid is a unique id created when TestInstruction is created in TestCase
    string TestInstructionTypeName = 3; // Name of TestInstruction
    string PluginId = 4; // The unique id of the plugin
    string PluginName = 5; // The name of the plugin
    string TestMainGroupGuid_RT = 6; // Reference to TestManinGroupGuid_RT which is top object ????Needed????
    repeated TestInstructionAttribute_RT TestInstructionAttributes = 7; // All attributes with values for TestInstruction
    string TestInstructionCreatedDateTime = 8; // When the TestInstruction, RunTime-version, was created
    repeated string TestInstructionSentDateTime = 9; //  When the TestInstruction, RunTime-version, was sent from Fenix. Can be resent if errors accours after sent.
    string ChoosenLandingZone = 10; // Chosen LandingZone for TestInstruction
}

//  An attribute with its typw nd value
message TestInstructionAttribute_RT {
    string TestInstructionAttributeGuid = 1; // Unique id for the attribute, set by Plugin
    string TestInstructionAttributeName = 2; // The name of the Attribute, set by Plugin
    TestInstructionAttributeTypeEnum TestInstructionAttributeType = 3 ; // Type of Attribute:  "TextBox", "ComboBox", "FileSelector"
    string TestInstructionAttributeValue = 4; // The value of the attribute
    // repeated string FunctionGuid = 4; Not used for now

}

// The TestInstructionAttribute can be one of the folowing types
enum TestInstructionAttributeTypeEnum {
    TextBox = 0; // Normal TextBox
    ComboBox = 1; // Normal ComboBox
    FileSelector = 2; // A choosen file (Name of the file)
    //FunctionSelector = 3; Not used for now
}

// **********
// END
// *********************************************************

// ***********************************
// Towards Fenix
// ***********************************

// *********************************************************
//  rpc SendTestInstructionResultTowardsFenix (TestInstructionExecutionResultMessage) returns (AckNackResponse)
//
// START
// **********

// The result of the TestInstructionExecution sent towards Fenix Inception
message TestInstructionExecutionResultMessage {
    string TestInstructionGuid = 1; //  TestInstructionGuid is a unique id created when TestInstruction is created in TestCase
    string ResultId = 2; // A unique id created by plugin
    string TimeOut = 3; // The Plugin sends back information about when the TestInstruction, Test Case, can be seen as Ended if no final result has sent been back for TestInstruction
    string TestInstructionResultCreatedDateTime = 4; // The DateTime when the message was created
    string TestInstructionResultSentDateTime = 5; // The DateTime when the message was sent
    AvailableTestExecutionResultsEnum TestExecutionResult = 6; // THe current execution status
}

// Status for an ongoing TestExecution of a TestInstruction
enum AvailableTestExecutionResultsEnum {
    Execution_Succeded = 0; // The execution succeded compared to expected result
    Execution_Failed = 1; // The execution failed compared to expected result
    Execution_Aborted = 2; // The Plugin Aborted the execution of the TestInstruction
    Execution_Running = 3; // Status for when TestInstruction is executing and TimeOut-time is sent back
}

// **********
// END
// *********************************************************

// *********************************************************
//  rpc SendTexecutionLogTowardsFenix (TexecutionLogMessage) returns (AckNackResponse)
//
// START

// A log post that sent back to Fenix Inception from plugin during test execution
message TexecutionLogMessage {
    string TestInstructionGuid = 1; //  TestInstructionGuid is a unique id created when TestInstruction is created in TestCase
    string LogMessageId = 2; // A unique id created by plugin
    string TestInstructionResultCreatedDateTime = 3; // The DateTime when the message was created
    string TestInstructionResultSentDateTime = 4; // The DateTime when the message was sent
    string LogMessage = 5; // The log message
    LogMessageTypeEnum LogMessageType = 6; // The type of the log message, text or json
}

// Is the log message a json-object or a plain text message
enum LogMessageTypeEnum {
    JSON = 0;
    TEXT = 1;
}

// **********
// END
// *********************************************************

// ***********************************************************************************
// Test Data messages
// ***********************************************************************************

// ***********************************
// Towards Plugin
// ***********************************

//  A TestData question is sent from Fenix towards a Plugin
message TestDataQuestionMessage {
    string asdfsdf = 1; //
}

// *********************************************************
// rpc GetSupportedTestDataDomains (SupportedTestDataDomainsRequest) returns (AckNackResponse)
// START
// **********

// Message to get supported TestData-domains from a plugin
message SupportedTestDataDomainsRequest {
    string PluginId = 1; // The unique id of the plugin
    string PluginName = 2; // The name of the plugin
    string MessageId = 3; // A unique id generated when sent from Fenix
}

// **********
// END
// *********************************************************

// *********************************************************
// rpc GetTestDataListFromFilterValues (TestDataListFromFilterValuesRequest) returns (AckNackResponse) {
// START
// **********

// Message with filter values to have the testdata plugin retrieve correct testdata to use
message TestDataListFromFilterValuesRequest {
    string PluginId = 1; // The unique id of the plugin
    string PluginName = 2; // The name of the plugin
    string MessageId = 3; // A unique id generated when sent from Fenix
    string TestDataDomainId = 4; // ???????
    int64 StartLineOfResultSet = 6; //  This is the first Test Data Row that should be sent back to Fenix
    int64 MaxNumberOffLinesInResult = 7; // This is the number of Test Data Rows that should be sent back to Fenix
    TestDataFormatTypeEnum TestDataType = 8; // THe format the testdata will be delivered
    repeated TestDataFilterHeader TestDataFIlterHeaders = 9; // All column headers for testdata
}

// Defines the different ways testdata should be formated back to Fenix
enum TestDataFormatTypeEnum {
    LIST = 0; // TestData will be delivered as a normal list
    //JSON_OBJECT = 1; // TestData will be delivered as a json object
    //XML = 2; // TestData will be delivered as a XML-file
    //OTHER_FILE = 3; TestData will be delivered as a non standard file
}

// Message to hold a Testdata header with its chosen testdata values
message TestDataFilterHeader {
    string TestDataFilterHeaderId = 1; //
    repeated TestDataFilterHeaderValue TestDataFilterHeaderValues = 2; //
}

// Message to hold a specific value (Id and Value)
message TestDataFilterHeaderValue {
    string TestDataFilterHeaderValueId = 1; //
    string TestDataFilterHeaderValueName = 2; //
}

// **********
// END
// *********************************************************



// ***********************************
// Towards Fenix
// ***********************************

//  An answer regarding a TestData question is sent from a plugin towards Fenix
message TestDataAnswerMessage {
    string asdfsdf = 1; //
}

// *********************************************************
//  rpc SupportedTestDataDomains (SupportedTestDataDomainsMessage) returns (AckNackResponse)
//
// START
// **********

// All supported Testdata domains supported by a specific Plugin
message SupportedTestDataDomainsMessage {
    string PluginId = 1; // The unique id of the plugin
    string PluginName = 2; // The name of the plugin
    string OriginalMessageId = 3; // A unique id from the request sent from Fenix
    string MessageId = 4; // A unique id generated when sent from Plugin
    repeated TestDataDomain TestDataDomains = 5; // All supported Testdata domains from plugin

}

// Message thats defines a specific domain of testdata, a specific area
message TestDataDomain {
    string TestDataDomainId = 1; // The unique id of the testdata domain
    string TestDataDomainName = 2; // The name of the testdata domain
    string TestDataDomainDescription = 3; // A description of the testdata domain
    string TestDataDomainMouseOver = 4; // A mouse over description of the testdata domain
    repeated TestDataFilterHeader TestDataFilterHeaders = 5; // All headers, keys, that is used for filter testdata
}

// Message holding one header, key, that is used for filtering testdata
message TestDataFilterHeader {
    string TestDataFilterHeaderId = 1; //  A unique id for the header
    string TestDataFilterHeaderName = 2;// A name for the keader
    string TestDataFilterHeaderDescription = 3; // A description of the header
    string TestDataFilterHeaderMouseOver = 4; // A mouse over description of the header
    string TestDataFilterHash = 5; // ??????????????????????????????????????????????????????????????????????????
    bool AllowMultipleChoices = 6; // Should multiple chocies be allowed for this header
    bool AllowNoChoice = 7; // Shpuld no choice be allowed for this header
    repeated TestDataFilterHeaderValue TestDataFilterHeaderValues = 8; // All values for a specific header, key, that can be usen when filtering
}

// Message holding a specific value for a header
message TestDataFilterHeaderValue {
    string TestDataFilterHeaderValueId = 1; // A unique id for the filter value
    string TestDataFilterHeaderValueName = 2; // The name for the filter value
}

// **********
// END
// *********************************************************


// *********************************************************
//  rpc TestDataListFromFilterValues (TestDataListFromFilterValuesMessage) returns (AckNackResponse)
//
// START
// **********

// Message that contains the filtered testdata that was asked for
message TestDataListFromFilterValuesMessage {
    string PluginId = 1; // The unique id of the plugin
    string PluginName = 2; // The name of the plugin
    string OriginalMessageId = 3; // A unique id from the request sent from Fenix
    string MessageId = 4; // A unique id generated when sent from Plugin
    string TestDataDomainId = 5; //
    int64 StartLineOfResultSet = 6; //  This is the first Test Data Row that should be sent back to Fenix
    int64 MaxNumberOffLinesInResult = 7; // This is the number of Test Data Rows that should be sent back to Fenix
    TestDataFormatTypeEnum TestDataType = 8; // THe format the testdata is been delivered in
    TestDataObject TestData = 9; // The object containing the testdata
}

// Message contining the testdata in a specific form
message TestDataObject {
    ListObject TestDataAsList = 1; // Object containing Testdata in Listform
    JsonObject TestDataAsJson = 2; // Object containing Testdata in json-form
    XmlObject TestDataAsXml = 3; // Object containing Testdata in xml-form
    OtherFileObject TestDataAsOtherFile = 4; // Object containing Testdata in a non standard form
}

// Testdata in listform
message ListObject {
    // Message for Header, Key
    message TestDataFIlterHeader {
        string TestDataFilterHeaderId = 1; // Unique id for the header
        string TestDataFilterHeaderName = 2; // The Header name/value
    }
    repeated TestDataFIlterHeader TestDataFIlterHeaders = 1; // All Headers
    // Message for row with testdata
    message TestDataRow {
        // Message for a value in the row
        message TestDataValue {
            string TestDataRowValueId = 1; // A unique id for the value
            string TestDataFilterRowValue = 2; // The value
        }
        repeated TestDataValue TestDataValues = 1; // All values on a row
    }
    repeated TestDataRow TestDataRows = 2; // All  testdata rows
}

// Testdata in jsaon-form
message JsonObject {


}

// Testdata in XML-form
message XmlObject {

}

// Testdata in some "other" form
message OtherFileObject {

}

// **********
// END
// *********************************************************


// ***********************************************************************************
// Registration messages
// ***********************************************************************************


// ***********************************
// Towards Plugin
// ***********************************

// *********************************************************
//  rpc PleaseReRegisterClientAddress(ReRegisterToGatewayMessage)returns(AckNackResponse)
// START
// **********

// Used when a Fenix or a Gateway comes online, message is sent to know clients
message ReRegisterToGatewayMessage {
    string GatewayAddress = 1; // The IP-address of the gateway
    string GatewayPort = 2; // The Port of the gateway
    string GatewayId = 3; // The gateways unique Id
    string GatewayName = 4; //The gateways name
}

// **********
// END
// *********************************************************

// ***********************************
// Towards Fenix
// ***********************************



// *********************************************************
//  rpc RegisterClientAddress (RegisterClientAddressRequest) returns (RegisterClientAddressResponse)
//
// START
// **********

// Request from client that register itself at gateway
message RegisterClientAddressRequest {
    CurrentVersionEnum gRPCVersion = 1; // The current version of the protofile
    string callingSystemId = 2; // The calling systems Id, Plugin or a Sub-Gateway,
    string callingSystemName = 3; // THe name of the Calling System
    string callingSystemIpAddress = 4; // The ip address for the calling system
}

// Prefered Port, where the client will called upon
message RegisterClientAddressResponse {
    string ClientPort = 1; //The port where the client will be called upon
    bool acknack = 2; // True=Ack, False=Nack
    string comments = 3; //Comments if needed
}

// **********
//
// END
// *********************************************************

// *********************************************************
//  rpc RegisterAvailbleTestInstruction(AvailbleTestInstructionAtPluginMessage)returns(AckNackResponse)
// START
// **********

// Data and Information regarding a specific TestInstruction offered by a specific plugin
message AvailbleTestInstructionAtPluginMessage {
    string asasd = 1; //
}

// **********
// END
// *********************************************************

// ***********************************************************************************
// Administrative messages
// ***********************************************************************************

// Used for defining the current version of the proto-file
enum CurrentVersionEnum {
    VERSION_0_1_0 = 0; // Current version

}

// Parameter used for Empty inputs
message EmptyParameter {
}

// Ack/Nack- Response message with comment
message AckNackResponse {
    bool acknack = 1; // True=Ack, False=Nack
    string comments = 2; //Comments if needed
}


// The Gateservice definition.
service Gateway {

    // ***********************************************************************************
    // Runtime methods
    // ***********************************************************************************

    // ***********************************
    // Towards Plugin
    // ***********************************

    // TestInstructions flows from Fenix Inception towards Plugins
    rpc SendTestInstructionTowardsPlugin (TestInstruction_RT) returns (AckNackResponse) {
    }

    // ***********************************
    // Towards Fenix
    // ***********************************

    //TestInstructionResults flows from Plugins towards Fenix Inception
    rpc SendTestInstructionResultTowardsFenix (TestInstructionExecutionResultMessage) returns (AckNackResponse) {
    }

    // Log-posts har sent from Plugins towards Fenix Inception
    rpc SendTexecutionLogTowardsFenix (TexecutionLogMessage) returns (AckNackResponse) {
    }

    // ***********************************************************************************
    // Test Data methods
    // ***********************************************************************************
    // ***********************************
    // Towards Plugin
    // ***********************************

    rpc SendTestDataQuestion (TestDataQuestionMessage) returns (AckNackResponse) {
    }

    rpc GetSupportedTestDataDomains (SupportedTestDataDomainsRequest) returns (AckNackResponse) {
    }

    rpc GetTestDataListFromFilterValues (TestDataListFromFilterValuesRequest) returns (AckNackResponse) {
}

    // ***********************************
    // Towards Fenix
    // ***********************************

    rpc SendTestDataAnswer(TestDataAnswerMessage)returns(AckNackResponse) {
    }

    rpc SupportedTestDataDomains (SupportedTestDataDomainsMessage) returns (AckNackResponse) {
    }

    rpc TestDataListFromFilterValues (TestDataListFromFilterValuesMessage) returns (AckNackResponse) {

    }
    // ***********************************************************************************
    // Registration methods
    // ***********************************************************************************
    // ***********************************
    // Towards Plugin
    // ***********************************

    // ***********************************
    // Towards Fenix
    // ***********************************

    // Register an avalible TestInstruction
    rpc RegisterAvailbleTestInstruction(AvailbleTestInstructionAtPluginMessage)returns(AckNackResponse){
    }

    // ***********************************************************************************
    // Administrative methods
    // ***********************************************************************************

    // ***********************************
    // Towards Plugin
    // ***********************************

    // At startup the gateway asks clients, Plugin or Sub-Gateway, to reregister to be able to check which of them that are online
    rpc PleaseReRegisterClientAddress(ReRegisterToGatewayMessage)returns(AckNackResponse){
    }


    // ***********************************
    // Towards Fenix
    // ***********************************

    // A Plugin register itself at a distributed gateway or a distributed gateway register itself at Fenix Inception gateway
    rpc RegisterClientAddress (RegisterClientAddressRequest) returns (RegisterClientAddressResponse) {
    }


}

